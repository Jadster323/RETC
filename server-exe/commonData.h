#pragma once
#include "../rpc-midl/rpc_retc.h"
#include <RzChromaSDKTypes.h>
#include <RzChromaSDKDefines.h>
#include <map>

#define SDK_MAIN_CONFIG_SECTION L"sdk"
#define SDK_MAIN_SUB_CONFIG_SECTION SDK_MAIN_CONFIG_SECTION L"."

namespace LookupArrays {
	using namespace ChromaSDK;
	static const int genericEffectType[ALL][CHROMA_RESERVED] = {
		{Keyboard::CHROMA_NONE ,Keyboard::CHROMA_WAVE, Keyboard::CHROMA_SPECTRUMCYCLING, Keyboard::CHROMA_BREATHING, -1 , Keyboard::CHROMA_REACTIVE, Keyboard::CHROMA_STATIC, Keyboard::CHROMA_CUSTOM},
		{Mouse::CHROMA_NONE, Mouse::CHROMA_WAVE, Mouse::CHROMA_SPECTRUMCYCLING, Mouse::CHROMA_BREATHING, Mouse::CHROMA_BLINKING, Mouse::CHROMA_REACTIVE, Mouse::CHROMA_STATIC, Mouse::CHROMA_CUSTOM2},
		{Headset::CHROMA_NONE, -1, Headset::CHROMA_SPECTRUMCYCLING, Headset::CHROMA_BREATHING, -1, -1, Headset::CHROMA_STATIC, Headset::CHROMA_CUSTOM}, // Headset
		{Mousepad::CHROMA_NONE, Mousepad::CHROMA_WAVE, Mousepad::CHROMA_SPECTRUMCYCLING, Mousepad::CHROMA_BREATHING, -1, -1, Mousepad::CHROMA_STATIC, Mousepad::CHROMA_CUSTOM}, // Mousepad
		{Keypad::CHROMA_NONE, Keypad::CHROMA_WAVE, Keypad::CHROMA_SPECTRUMCYCLING, Keypad::CHROMA_BREATHING, -1, Keypad::CHROMA_REACTIVE, Keypad::CHROMA_STATIC, Keypad::CHROMA_CUSTOM} // Keypad
	};

	static const efsize_t effectSize[ESIZE][CHROMA_RESERVED] = {
		{sizeof(Keyboard::BREATHING_EFFECT_TYPE), sizeof(Keyboard::CUSTOM_EFFECT_TYPE), sizeof(Keyboard::REACTIVE_EFFECT_TYPE), sizeof(Keyboard::STATIC_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(WAVE_EFFECT_TYPE), 0, sizeof(Keyboard::CUSTOM_KEY_EFFECT_TYPE)},
		{sizeof(Mouse::BLINKING_EFFECT_TYPE), sizeof(Keyboard::BREATHING_EFFECT_TYPE), sizeof(Keyboard::CUSTOM_EFFECT_TYPE), sizeof(Keyboard::REACTIVE_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(STATIC_EFFECT_TYPE), sizeof(WAVE_EFFECT_TYPE), sizeof(Mouse::CUSTOM_EFFECT_TYPE2)},
		{sizeof(Headset::STATIC_EFFECT_TYPE), sizeof(Headset::BREATHING_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(Headset::CUSTOM_EFFECT_TYPE), 0, 0, 0, 0},
		{sizeof(Mousepad::BREATHING_EFFECT_TYPE), sizeof(Mousepad::CUSTOM_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(Mousepad::STATIC_EFFECT_TYPE), sizeof(Mousepad::WAVE_EFFECT_TYPE), 0, 0, 0},
		{sizeof(Keypad::BREATHING_EFFECT_TYPE), sizeof(Keypad::CUSTOM_EFFECT_TYPE), sizeof(Keypad::REACTIVE_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(Keypad::STATIC_EFFECT_TYPE), sizeof(Keypad::WAVE_EFFECT_TYPE), 0, 0},
		{sizeof(WAVE_EFFECT_TYPE), sizeof(SPECTRUMCYCLING_EFFECT_TYPE), sizeof(BREATHING_EFFECT_TYPE), sizeof(BLINKING_EFFECT_TYPE), sizeof(REACTIVE_EFFECT_TYPE), sizeof(STATIC_EFFECT_TYPE), sizeof(CUSTOM_EFFECT_TYPE), 0}
	};

	static const GUID razerDevices[] = {
		// Keyboards
		BLACKWIDOW_CHROMA, BLACKWIDOW_CHROMA_TE, DEATHSTALKER_CHROMA, OVERWATCH_KEYBOARD, BLACKWIDOW_X_CHROMA,
		BLACKWIDOW_X_TE_CHROMA, OMATA_CHROMA, BLADE_STEALTH, BLADE, BLADE_PRO, BLACKWIDOW_CHROMA2,
		// Mice
		DEATHADDER_CHROMA, MAMBA_CHROMA_TE, DIAMONDBACK_CHROMA, MAMBA_CHROMA, NAGA_EPIC_CHROMA, NAGA_CHROMA,
		OROCHI_CHROMA, NAGA_HEX_CHROMA, DEATHADDER_ELITE_CHROMA,
		// Headsets
		KRAKEN71_CHROMA, MANOWAR_CHROMA, KRAKEN71_REFRESH_CHROMA,
		// Mousepads
		FIREFLY_CHROMA,
		// Keypads
		TARTARUS_CHROMA , ORBWEAVER_CHROMA
	};

	// Emulated device related values
	static const wchar_t* EM_KEYS[] = { L"EM_KEYBOARD", L"EM_MOUSE", L"EM_HEADSET", L"EM_MOUSEPAD", L"EM_KEYPAD" };
	static const wchar_t* EM_VALS[] = { L"BLACKWIDOW_CHROMA", L"MAMBA_CHROMA", L"KRAKEN71_CHROMA", L"FIREFLY_CHROMA", L"ORBWEAVER_CHROMA" };

}

namespace LookupMaps {
	using namespace ChromaSDK;

	static const std::map<std::wstring, const GUID> razerStringToDevID = {
		{ L"BLACKWIDOW_CHROMA", BLACKWIDOW_CHROMA },
		{ L"BLACKWIDOW_CHROMA_TE", BLACKWIDOW_CHROMA_TE },
		{ L"DEATHSTALKER_CHROMA", DEATHSTALKER_CHROMA },
		{ L"OVERWATCH_KEYBOARD", OVERWATCH_KEYBOARD },
		{ L"BLACKWIDOW_X_CHROMA", BLACKWIDOW_X_CHROMA },
		{ L"BLACKWIDOW_X_TE_CHROMA", BLACKWIDOW_X_TE_CHROMA },
		{ L"OMATA_CHROMA", OMATA_CHROMA },
		{ L"BLADE_STEALTH", BLADE_STEALTH },
		{ L"BLADE", BLADE },
		{ L"BLADE_PRO", BLADE_PRO},
		{ L"BLACKWIDOW_CHROMA2", BLACKWIDOW_CHROMA2},
		{ L"DEATHADDER_CHROMA", DEATHADDER_CHROMA },
		{ L"MAMBA_CHROMA_TE", MAMBA_CHROMA_TE },
		{ L"DIAMONDBACK_CHROMA", DIAMONDBACK_CHROMA },
		{ L"MAMBA_CHROMA", MAMBA_CHROMA },
		{ L"NAGA_EPIC_CHROMA", NAGA_EPIC_CHROMA },
		{ L"NAGA_CHROMA", NAGA_CHROMA },
		{ L"OROCHI_CHROMA", OROCHI_CHROMA },
		{ L"NAGA_HEX_CHROMA", NAGA_HEX_CHROMA },
		{ L"DEATHADDER_ELITE_CHROMA", DEATHADDER_ELITE_CHROMA },
		{ L"KRAKEN71_CHROMA", KRAKEN71_CHROMA },
		{ L"MANOWAR_CHROMA", MANOWAR_CHROMA },
		{ L"KRAKEN71_REFRESH_CHROMA", KRAKEN71_REFRESH_CHROMA },
		{ L"FIREFLY_CHROMA", FIREFLY_CHROMA },
		{ L"TARTARUS_CHROMA", TARTARUS_CHROMA },
		{ L"ORBWEAVER_CHROMA", ORBWEAVER_CHROMA }
	};
}